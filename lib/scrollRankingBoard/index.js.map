{"version":3,"file":"index.js","sources":["../../src/components/scrollRankingBoard/index.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useMemo } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport classnames from 'classnames'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nimport useAutoResize from '../../use/autoResize'\r\n\r\nimport './style.less'\r\n\r\nconst defaultConfig = {\r\n  /**\r\n   * @description Board data\r\n   * @type {Array<Object>}\r\n   * @default data = []\r\n   */\r\n  data: [],\r\n  /**\r\n   * @description Row num\r\n   * @type {Number}\r\n   * @default rowNum = 5\r\n   */\r\n  rowNum: 5,\r\n  /**\r\n   * @description Scroll wait time\r\n   * @type {Number}\r\n   * @default waitTime = 2000\r\n   */\r\n  waitTime: 2000,\r\n  /**\r\n   * @description Carousel type\r\n   * @type {String}\r\n   * @default carousel = 'single'\r\n   * @example carousel = 'single' | 'page'\r\n   */\r\n  carousel: 'single',\r\n  /**\r\n   * @description Value unit\r\n   * @type {String}\r\n   * @default unit = ''\r\n   * @example unit = 'ton'\r\n   */\r\n  unit: ''\r\n}\r\n\r\nfunction calcRowsData({ data, rowNum }) {\r\n  data.sort(({ value: a }, { value: b }) => {\r\n    if (a > b) return -1\r\n    if (a < b) return 1\r\n    if (a === b) return 0\r\n  })\r\n\r\n  const value = data.map(({ value }) => value)\r\n\r\n  const max = Math.max(...value) || 0\r\n\r\n  data = data.map((row, i) => ({\r\n    ...row,\r\n    ranking: i + 1,\r\n    percent: (row.value / max) * 100\r\n  }))\r\n\r\n  const rowLength = data.length\r\n\r\n  if (rowLength > rowNum && rowLength < 2 * rowNum) {\r\n    data = [...data, ...data]\r\n  }\r\n\r\n  data = data.map((d, i) => ({ ...d, scroll: i }))\r\n\r\n  return data\r\n}\r\n\r\nconst ScrollRankingBoard = ({ config, className, style }) => {\r\n  const { height, domRef } = useAutoResize(calcData, onResize)\r\n\r\n  const [state, setState] = useState({\r\n    mergedConfig: null,\r\n\r\n    rowsData: [],\r\n\r\n    rows: [],\r\n\r\n    avgHeight: 0,\r\n\r\n    heights: [],\r\n\r\n    animationIndex: 0\r\n  })\r\n\r\n  const { mergedConfig, rows, heights } = state\r\n\r\n  const timerRef = useRef(null)\r\n  const stateRef = useRef(state)\r\n\r\n  stateRef.current = state\r\n\r\n  function onResize() {\r\n    if (!mergedConfig) return\r\n\r\n    calcHeights(true)\r\n  }\r\n\r\n  function calcData() {\r\n    const mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\r\n\r\n    const rowsData = calcRowsData(mergedConfig)\r\n\r\n    const heightData = calcHeights(mergedConfig)\r\n\r\n    setState(state => ({\r\n      ...state,\r\n      mergedConfig,\r\n      rowsData,\r\n      rows: [...rowsData],\r\n      ...heightData\r\n    }))\r\n\r\n    animation(true)\r\n  }\r\n\r\n  function calcHeights({ rowNum, data }, onresize = false) {\r\n    const avgHeight = height / rowNum\r\n\r\n    if (onresize) {\r\n      return { avgHeight }\r\n    }\r\n\r\n    return { avgHeight, heights: new Array(data.length).fill(avgHeight) }\r\n  }\r\n\r\n  async function animation(start = false) {\r\n    let {\r\n      avgHeight,\r\n      animationIndex,\r\n      mergedConfig,\r\n      rowsData,\r\n      animation\r\n    } = stateRef.current\r\n\r\n    const { waitTime, carousel, rowNum } = mergedConfig\r\n\r\n    const rowLength = rowsData.length\r\n\r\n    if (rowNum >= rowLength) return\r\n\r\n    if (start) await new Promise(resolve => setTimeout(resolve, waitTime))\r\n\r\n    const animationNum = carousel === 'single' ? 1 : rowNum\r\n\r\n    let rows = rowsData.slice(animationIndex)\r\n    rows.push(...rowsData.slice(0, animationIndex))\r\n\r\n    setState(state => ({\r\n      ...state,\r\n      rows,\r\n      heights: new Array(rowLength).fill(avgHeight)\r\n    }))\r\n\r\n    await new Promise(resolve => setTimeout(resolve, 300))\r\n\r\n    animationIndex += animationNum\r\n\r\n    const back = animationIndex - rowLength\r\n    if (back >= 0) animationIndex = back\r\n\r\n    setState(state => ({\r\n      ...state,\r\n      animationIndex,\r\n      heights: [...state.heights].splice(\r\n        0,\r\n        animationNum,\r\n        ...new Array(animationNum).fill(0)\r\n      )\r\n    }))\r\n\r\n    timerRef.current = setTimeout(animation, waitTime - 300)\r\n  }\r\n\r\n  useEffect(() => {\r\n    calcData()\r\n\r\n    return () => clearTimeout(timerRef.current)\r\n  }, [config])\r\n\r\n  const classNames = useMemo(\r\n    () => classnames('dv-scroll-ranking-board', className),\r\n    className\r\n  )\r\n\r\n  return (\r\n    <div className={classNames} style={style} ref={domRef}>\r\n      {rows.map((item, i) => (\r\n        <div\r\n          className='row-item'\r\n          key={item.toString() + item.scroll}\r\n          style={{ height: `${heights[i]}px` }}\r\n        >\r\n          <div className='ranking-info'>\r\n            <div className='rank'>No.{item.ranking}</div>\r\n            <div className='info-name'>{item.name}</div>\r\n            <div className='ranking-value'>\r\n              {item.value + mergedConfig.unit}\r\n            </div>\r\n          </div>\r\n\r\n          <div className='ranking-column'>\r\n            <div\r\n              className='inside-column'\r\n              style={{ width: `${item.percent}%` }}\r\n            >\r\n              <div className='shine' />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nScrollRankingBoard.propTypes = {\r\n  config: PropTypes.object,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object\r\n}\r\n\r\n// 指定 props 的默认值：\r\nScrollRankingBoard.defaultProps = {\r\n  config: {}\r\n}\r\n\r\nexport default ScrollRankingBoard\r\n"],"names":["defaultConfig","calcRowsData","data","rowNum","sort","a","value","b","map","max","Math","row","i","rowLength","length","d","scroll","ScrollRankingBoard","start","stateRef","current","avgHeight","animationIndex","mergedConfig","rowsData","animation","waitTime","carousel","Promise","setTimeout","resolve","slice","push","state","Array","fill","animationNum","back","heights","splice","config","className","style","useAutoResize","calcData","onResize","height","domRef","useState","setState","rows","timerRef","useRef","deepMerge","deepClone","heightData","calcHeights","onresize","clearTimeout","classNames","useMemo","classnames","React","item","toString","ranking","name","unit","width","percent","propTypes","PropTypes","object","string","defaultProps"],"mappings":";;;;;;;;;;;;;;;;AAcA,IAAMA,gBAAgB;;;;;;QAMd,EANc;;;;;;UAYZ,CAZY;;;;;;YAkBV,IAlBU;;;;;;;YAyBV,QAzBU;;;;;;;QAgCd;CAhCR;;AAmCA,SAASC,YAAT,OAAwC;MAAhBC,IAAgB,QAAhBA,IAAgB;MAAVC,MAAU,QAAVA,MAAU;;OACjCC,IAAL,CAAU,wBAAgC;QAAtBC,CAAsB,SAA7BC,KAA6B;QAARC,CAAQ,SAAfD,KAAe;;QACpCD,IAAIE,CAAR,EAAW,OAAO,CAAC,CAAR;QACPF,IAAIE,CAAR,EAAW,OAAO,CAAP;QACPF,MAAME,CAAV,EAAa,OAAO,CAAP;GAHf;;MAMMD,QAAQJ,KAAKM,GAAL,CAAS;QAAGF,KAAH,SAAGA,KAAH;WAAeA,KAAf;GAAT,CAAd;;MAEMG,MAAMC,KAAKD,GAAL,yCAAYH,KAAZ,MAAsB,CAAlC;;SAEOJ,KAAKM,GAAL,CAAS,UAACG,GAAD,EAAMC,CAAN;kCACXD,GADW;eAELC,IAAI,CAFC;eAGJD,IAAIL,KAAJ,GAAYG,GAAb,GAAoB;;GAHxB,CAAP;;MAMMI,YAAYX,KAAKY,MAAvB;;MAEID,YAAYV,MAAZ,IAAsBU,YAAY,IAAIV,MAA1C,EAAkD;iDACrCD,IAAX,+BAAoBA,IAApB;;;SAGKA,KAAKM,GAAL,CAAS,UAACO,CAAD,EAAIH,CAAJ;kCAAgBG,CAAhB,IAAmBC,QAAQJ,CAA3B;GAAT,CAAP;;SAEOV,IAAP;;;AAGF,IAAMe,qBAAqB,SAArBA,kBAAqB,QAAkC;;iFA0D3D;UAAyBC,KAAzB,uEAAiC,KAAjC;;;;;;;;kCAOMC,SAASC,OAPf,EAEIC,SAFJ,qBAEIA,SAFJ,EAGIC,cAHJ,qBAGIA,cAHJ,EAIIC,YAJJ,qBAIIA,YAJJ,EAKIC,QALJ,qBAKIA,QALJ,EAMIC,SANJ,qBAMIA,SANJ;sBAAA,GASyCF,YATzC,CASUG,QATV,EASoBC,QATpB,GASyCJ,YATzC,CASoBI,QATpB,EAS8BxB,MAT9B,GASyCoB,YATzC,CAS8BpB,MAT9B;uBAAA,GAWoBqB,SAASV,MAX7B;;oBAaMX,UAAUU,SAbhB;;;;;;;;mBAeMK,KAfN;;;;;;qBAemB,IAAIU,OAAJ,CAAY;uBAAWC,WAAWC,OAAX,EAAoBJ,QAApB,CAAX;eAAZ,CAfnB;;;0BAAA,GAiBuBC,aAAa,QAAb,GAAwB,CAAxB,GAA4BxB,MAjBnD;kBAAA,GAmBaqB,SAASO,KAAT,CAAeT,cAAf,CAnBb;;mBAoBOU,IAAL,yCAAaR,SAASO,KAAT,CAAe,CAAf,EAAkBT,cAAlB,CAAb;;uBAES;8CACJW,KADI;4BAAA;2BAGE,IAAIC,KAAJ,CAAUrB,SAAV,EAAqBsB,IAArB,CAA0Bd,SAA1B;;eAHX;;;qBAMM,IAAIO,OAAJ,CAAY;uBAAWC,WAAWC,OAAX,EAAoB,GAApB,CAAX;eAAZ,CA5BR;;;;gCA8BoBM,YAAlB;;kBA9BF,GAgCed,iBAAiBT,SAhChC;;kBAiCMwB,QAAQ,CAAZ,EAAef,iBAAiBe,IAAjB;;uBAEN;;;8CACJJ,KADI;gDAAA;2BAGE,+CAAIA,MAAMK,OAAV,IAAmBC,MAAnB,eACP,CADO,EAEPH,YAFO,qCAGJ,IAAIF,KAAJ,CAAUE,YAAV,EAAwBD,IAAxB,CAA6B,CAA7B,CAHI;;eAHX;;uBAUSf,OAAT,GAAmBS,WAAWJ,SAAX,EAAsBC,WAAW,GAAjC,CAAnB;;;;;;;;KAvGyD;;oBA0D5CD,SA1D4C;;;;;MAA/Be,MAA+B,SAA/BA,MAA+B;MAAvBC,SAAuB,SAAvBA,SAAuB;MAAZC,KAAY,SAAZA,KAAY;;uBAChCC,wBAAcC,QAAd,EAAwBC,QAAxB,CADgC;MACnDC,MADmD,kBACnDA,MADmD;MAC3CC,MAD2C,kBAC3CA,MAD2C;;kBAGjCC,eAAS;kBACnB,IADmB;;cAGvB,EAHuB;;UAK3B,EAL2B;;eAOtB,CAPsB;;aASxB,EATwB;;oBAWjB;GAXQ,CAHiC;;MAGpDf,KAHoD;MAG7CgB,QAH6C;;MAiBnD1B,YAjBmD,GAiBnBU,KAjBmB,CAiBnDV,YAjBmD;MAiBrC2B,IAjBqC,GAiBnBjB,KAjBmB,CAiBrCiB,IAjBqC;MAiB/BZ,OAjB+B,GAiBnBL,KAjBmB,CAiB/BK,OAjB+B;;;MAmBrDa,WAAWC,aAAO,IAAP,CAAjB;MACMjC,WAAWiC,aAAOnB,KAAP,CAAjB;;WAESb,OAAT,GAAmBa,KAAnB;;WAESY,QAAT,GAAoB;QACd,CAACtB,YAAL,EAAmB;;gBAEP,IAAZ;;;WAGOqB,QAAT,GAAoB;QACZrB,eAAe8B,iBAAUC,iBAAUtD,aAAV,EAAyB,IAAzB,CAAV,EAA0CwC,UAAU,EAApD,CAArB;;QAEMhB,WAAWvB,aAAasB,YAAb,CAAjB;;QAEMgC,aAAaC,YAAYjC,YAAZ,CAAnB;;aAES;oCACJU,KADI;kCAAA;0BAAA;oDAIGT,QAAV;SACG+B,UALI;KAAT;;cAQU,IAAV;;;WAGOC,WAAT,QAAyD;QAAlCrD,MAAkC,SAAlCA,MAAkC;QAA1BD,IAA0B,SAA1BA,IAA0B;QAAlBuD,QAAkB,uEAAP,KAAO;;QACjDpC,YAAYyB,SAAS3C,MAA3B;;QAEIsD,QAAJ,EAAc;aACL,EAAEpC,oBAAF,EAAP;;;WAGK,EAAEA,oBAAF,EAAaiB,SAAS,IAAIJ,KAAJ,CAAUhC,KAAKY,MAAf,EAAuBqB,IAAvB,CAA4Bd,SAA5B,CAAtB,EAAP;;;kBAmDQ,YAAM;;;WAGP;aAAMqC,aAAaP,SAAS/B,OAAtB,CAAN;KAAP;GAHF,EAIG,CAACoB,MAAD,CAJH;;MAMMmB,aAAaC,cACjB;WAAMC,qBAAW,yBAAX,EAAsCpB,SAAtC,CAAN;GADiB,EAEjBA,SAFiB,CAAnB;;SAMEqB;;MAAK,WAAWH,UAAhB,EAA4B,OAAOjB,KAAnC,EAA0C,KAAKK,MAA/C;SACQvC,GAAL,CAAS,UAACuD,IAAD,EAAOnD,CAAP;aACRkD;;;qBACY,UADZ;eAEOC,KAAKC,QAAL,KAAkBD,KAAK/C,MAF9B;iBAGS,EAAE8B,QAAWR,QAAQ1B,CAAR,CAAX,OAAF;;;;YAEF,WAAU,cAAf;;;cACO,WAAU,MAAf;;iBAA+BqD;WADjC;;;cAEO,WAAU,WAAf;iBAAiCC;WAFnC;;;cAGO,WAAU,eAAf;iBACQ5D,KAAL,GAAaiB,aAAa4C;;SATjC;;;YAaO,WAAU,gBAAf;;;;yBAEc,eADZ;qBAES,EAAEC,OAAUL,KAAKM,OAAf,MAAF;;kDAEF,WAAU,OAAf;;;OAnBE;KAAT;GAFL;CArHF;;AAmJApD,mBAAmBqD,SAAnB,GAA+B;UACrBC,UAAUC,MADW;aAElBD,UAAUE,MAFQ;SAGtBF,UAAUC;;;CAHnB,CAOAvD,mBAAmByD,YAAnB,GAAkC;UACxB;CADV;;;;"}