{"version":3,"file":"index.js","sources":["../../src/components/scrollBoard/index.js"],"sourcesContent":["import React, { useEffect, useState, useRef, useMemo } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport classnames from 'classnames'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nimport useAutoResize from '../../use/autoResize'\r\nimport { co } from '../../util'\r\n\r\nimport './style.less'\r\n\r\nconst defaultConfig = {\r\n  /**\r\n   * @description Board header\r\n   * @type {Array<String>}\r\n   * @default header = []\r\n   * @example header = ['column1', 'column2', 'column3']\r\n   */\r\n  header: [],\r\n  /**\r\n   * @description Board data\r\n   * @type {Array<Array>}\r\n   * @default data = []\r\n   */\r\n  data: [],\r\n  /**\r\n   * @description Row num\r\n   * @type {Number}\r\n   * @default rowNum = 5\r\n   */\r\n  rowNum: 5,\r\n  /**\r\n   * @description Header background color\r\n   * @type {String}\r\n   * @default headerBGC = '#00BAFF'\r\n   */\r\n  headerBGC: '#00BAFF',\r\n  /**\r\n   * @description Odd row background color\r\n   * @type {String}\r\n   * @default oddRowBGC = '#003B51'\r\n   */\r\n  oddRowBGC: '#003B51',\r\n  /**\r\n   * @description Even row background color\r\n   * @type {String}\r\n   * @default evenRowBGC = '#003B51'\r\n   */\r\n  evenRowBGC: '#0A2732',\r\n  /**\r\n   * @description Scroll wait time\r\n   * @type {Number}\r\n   * @default waitTime = 2000\r\n   */\r\n  waitTime: 2000,\r\n  /**\r\n   * @description Header height\r\n   * @type {Number}\r\n   * @default headerHeight = 35\r\n   */\r\n  headerHeight: 35,\r\n  /**\r\n   * @description Column width\r\n   * @type {Array<Number>}\r\n   * @default columnWidth = []\r\n   */\r\n  columnWidth: [],\r\n  /**\r\n   * @description Column align\r\n   * @type {Array<String>}\r\n   * @default align = []\r\n   * @example align = ['left', 'center', 'right']\r\n   */\r\n  align: [],\r\n  /**\r\n   * @description Show index\r\n   * @type {Boolean}\r\n   * @default index = false\r\n   */\r\n  index: false,\r\n  /**\r\n   * @description Carousel type\r\n   * @type {String}\r\n   * @default carousel = 'single'\r\n   * @example carousel = 'single' | 'page'\r\n   */\r\n  carousel: 'single'\r\n}\r\n\r\nfunction calcHeaderData({ header, index }) {\r\n  if (!header.length) {\r\n    return []\r\n  }\r\n\r\n  header = [...header]\r\n\r\n  if (index) header.unshift('#')\r\n\r\n  return header\r\n}\r\n\r\nfunction calcRows({ data, index, headerBGC, rowNum }) {\r\n  if (index) {\r\n    data = data.map((row, i) => {\r\n      row = [...row]\r\n\r\n      const indexTag = `<span class=\"index\" style=\"background-color: ${headerBGC};\">${i +\r\n        1}</span>`\r\n\r\n      row.unshift(indexTag)\r\n\r\n      return row\r\n    })\r\n  }\r\n\r\n  data = data.map((ceils, i) => ({ ceils, rowIndex: i }))\r\n\r\n  const rowLength = data.length\r\n\r\n  if (rowLength > rowNum && rowLength < 2 * rowNum) {\r\n    data = [...data, ...data]\r\n  }\r\n\r\n  return data.map((d, i) => ({ ...d, scroll: i }))\r\n}\r\n\r\nfunction calcAligns(mergedConfig, header) {\r\n  const columnNum = header.length\r\n\r\n  let aligns = new Array(columnNum).fill('left')\r\n\r\n  const { align } = mergedConfig\r\n\r\n  return deepMerge(aligns, align)\r\n}\r\n\r\nconst ScrollBoard = ({ onClick, config, className, style }) => {\r\n  const { width, height, domRef } = useAutoResize()\r\n\r\n  const [state, setState] = useState({\r\n    mergedConfig: null,\r\n\r\n    header: [],\r\n\r\n    rows: [],\r\n\r\n    widths: [],\r\n\r\n    heights: [],\r\n\r\n    aligns: []\r\n  })\r\n\r\n  const { mergedConfig, header, rows, widths, heights, aligns } = state\r\n\r\n  const stateRef = useRef({\r\n    ...state,\r\n    rowsData: [],\r\n    avgHeight: 0,\r\n    animationIndex: 0\r\n  })\r\n\r\n  Object.assign(stateRef.current, state)\r\n\r\n  function onResize() {\r\n    if (!mergedConfig) return\r\n\r\n    const widths = calcWidths(mergedConfig, stateRef.current.rowsData)\r\n\r\n    const heights = calcHeights(mergedConfig, header)\r\n\r\n    const data = { widths }\r\n\r\n    heights !== undefined && Object.assign(data, { heights })\r\n\r\n    Object.assign(stateRef.current, data)\r\n    setState(state => ({ ...state, ...data }))\r\n  }\r\n\r\n  function calcData() {\r\n    const mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\r\n\r\n    const header = calcHeaderData(mergedConfig)\r\n\r\n    const rows = calcRows(mergedConfig)\r\n\r\n    const widths = calcWidths(mergedConfig, stateRef.current.rowsData)\r\n\r\n    const heights = calcHeights(mergedConfig, header)\r\n\r\n    const aligns = calcAligns(mergedConfig, header)\r\n\r\n    const data = {\r\n      mergedConfig,\r\n      header,\r\n      rows,\r\n      widths,\r\n      aligns\r\n    }\r\n\r\n    heights !== undefined && Object.assign(data, { heights })\r\n\r\n    Object.assign(stateRef.current, data, { rowsData: rows })\r\n\r\n    setState(state => ({ ...state, ...data }))\r\n  }\r\n\r\n  function calcWidths({ columnWidth, header }, rowsData) {\r\n    const usedWidth = columnWidth.reduce((all, w) => all + w, 0)\r\n\r\n    let columnNum = 0\r\n    if (rowsData[0]) {\r\n      columnNum = rowsData[0].ceils.length\r\n    } else if (header.length) {\r\n      columnNum = header.length\r\n    }\r\n\r\n    const avgWidth = (width - usedWidth) / (columnNum - columnWidth.length)\r\n\r\n    const widths = new Array(columnNum).fill(avgWidth)\r\n\r\n    return deepMerge(widths, columnWidth)\r\n  }\r\n\r\n  function calcHeights(\r\n    { headerHeight, rowNum, data },\r\n    header,\r\n    onresize = false\r\n  ) {\r\n    let allHeight = height\r\n\r\n    if (header.length) allHeight -= headerHeight\r\n\r\n    const avgHeight = allHeight / rowNum\r\n\r\n    Object.assign(stateRef.current, { avgHeight })\r\n\r\n    if (!onresize) {\r\n      return new Array(data.length).fill(avgHeight)\r\n    }\r\n  }\r\n\r\n  function * animation(start = false) {\r\n    let {\r\n      avgHeight,\r\n      animationIndex,\r\n      mergedConfig: { waitTime, carousel, rowNum },\r\n      rowsData\r\n    } = stateRef.current\r\n\r\n    const rowLength = rowsData.length\r\n\r\n    if (start) yield new Promise(resolve => setTimeout(resolve, waitTime))\r\n\r\n    const animationNum = carousel === 'single' ? 1 : rowNum\r\n\r\n    let rows = rowsData.slice(animationIndex)\r\n    rows.push(...rowsData.slice(0, animationIndex))\r\n\r\n    const heights = new Array(rowLength).fill(avgHeight)\r\n    setState(state => ({ ...state, rows, heights }))\r\n\r\n    yield new Promise(resolve => setTimeout(resolve, 300))\r\n\r\n    animationIndex += animationNum\r\n\r\n    const back = animationIndex - rowLength\r\n    if (back >= 0) animationIndex = back\r\n\r\n    const newHeights = [...heights]\r\n    newHeights.splice(0, animationNum, ...new Array(animationNum).fill(0))\r\n\r\n    Object.assign(stateRef.current, { animationIndex })\r\n    setState(state => ({ ...state, heights: newHeights }))\r\n  }\r\n\r\n  function emitEvent(ri, ci, row, ceil) {\r\n    const { ceils, rowIndex } = row\r\n\r\n    onClick && onClick({ row: ceils, ceil, rowIndex, columnIndex: ci })\r\n  }\r\n\r\n  const getBackgroundColor = rowIndex =>\r\n    mergedConfig[rowIndex % 2 === 0 ? 'evenRowBGC' : 'oddRowBGC']\r\n\r\n  useEffect(() => {\r\n    calcData()\r\n\r\n    let start = true\r\n\r\n    function * loop() {\r\n      while (true) {\r\n        yield * animation(start)\r\n\r\n        start = false\r\n\r\n        const { waitTime } = stateRef.current.mergedConfig\r\n\r\n        yield new Promise(resolve => setTimeout(resolve, waitTime - 300))\r\n      }\r\n    }\r\n\r\n    const {\r\n      mergedConfig: { rowNum },\r\n      rows: rowsData\r\n    } = stateRef.current\r\n\r\n    const rowLength = rowsData.length\r\n\r\n    if (rowNum >= rowLength) return\r\n\r\n    const it = loop()\r\n\r\n    co(it)\r\n\r\n    return it.return\r\n  }, [config])\r\n\r\n  useEffect(onResize, [height])\r\n\r\n  const classNames = useMemo(() => classnames('dv-scroll-board', className), [\r\n    className\r\n  ])\r\n\r\n  return (\r\n    <div className={classNames} style={style} ref={domRef}>\r\n      {!!header.length && !!mergedConfig && (\r\n        <div\r\n          className='header'\r\n          style={{ backgroundColor: `${mergedConfig.headerBGC}` }}\r\n        >\r\n          {header.map((headerItem, i) => (\r\n            <div\r\n              className='header-item'\r\n              key={headerItem + i}\r\n              style={{\r\n                height: `${mergedConfig.headerHeight}px`,\r\n                lineHeight: `${mergedConfig.headerHeight}px`,\r\n                width: `${widths[i]}px`\r\n              }}\r\n              align={aligns[i]}\r\n              dangerouslySetInnerHTML={{ __html: headerItem }}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {!!mergedConfig && (\r\n        <div\r\n          className='rows'\r\n          style={{\r\n            height: `${height -\r\n              (header.length ? mergedConfig.headerHeight : 0)}px`\r\n          }}\r\n        >\r\n          {rows.map((row, ri) => (\r\n            <div\r\n              className='row-item'\r\n              key={row.toString() + row.scroll}\r\n              style={{\r\n                height: `${heights[ri]}px`,\r\n                lineHeight: `${heights[ri]}px`,\r\n                backgroundColor: `${getBackgroundColor(row.rowIndex)}`\r\n              }}\r\n            >\r\n              {row.ceils.map((ceil, ci) => (\r\n                <div\r\n                  className='ceil'\r\n                  key={ceil + ri + ci}\r\n                  style={{ width: `${widths[ci]}px` }}\r\n                  align={aligns[ci]}\r\n                  dangerouslySetInnerHTML={{ __html: ceil }}\r\n                  onClick={() => emitEvent(ri, ci, row, ceil)}\r\n                />\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nScrollBoard.propTypes = {\r\n  config: PropTypes.object,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object\r\n}\r\n\r\n// 指定 props 的默认值：\r\nScrollBoard.defaultProps = {\r\n  config: {}\r\n}\r\n\r\nexport default ScrollBoard\r\n"],"names":["defaultConfig","calcHeaderData","header","index","length","unshift","calcRows","data","headerBGC","rowNum","map","row","i","indexTag","ceils","rowIndex","rowLength","d","scroll","calcAligns","mergedConfig","columnNum","aligns","Array","fill","align","deepMerge","ScrollBoard","animation","onClick","config","className","style","useAutoResize","width","height","domRef","useState","state","setState","rows","widths","heights","stateRef","useRef","assign","current","onResize","calcWidths","rowsData","calcHeights","undefined","Object","calcData","deepClone","columnWidth","usedWidth","reduce","all","w","avgWidth","headerHeight","onresize","allHeight","avgHeight","start","animationIndex","waitTime","carousel","Promise","setTimeout","resolve","slice","push","animationNum","back","splice","newHeights","emitEvent","ri","ci","ceil","columnIndex","getBackgroundColor","loop","it","return","classNames","useMemo","classnames","React","backgroundColor","headerItem","__html","toString","propTypes","PropTypes","object","func","string","defaultProps"],"mappings":"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"}