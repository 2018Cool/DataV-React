{"version":3,"file":"index.js","sources":["../../src/components/scrollRankingBoard/index.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useMemo } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport classnames from 'classnames'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nimport useAutoResize from '../../use/autoResize'\r\nimport { co } from '../../util'\r\n\r\nimport './style.less'\r\n\r\nconst defaultConfig = {\r\n  /**\r\n   * @description Board data\r\n   * @type {Array<Object>}\r\n   * @default data = []\r\n   */\r\n  data: [],\r\n  /**\r\n   * @description Row num\r\n   * @type {Number}\r\n   * @default rowNum = 5\r\n   */\r\n  rowNum: 5,\r\n  /**\r\n   * @description Scroll wait time\r\n   * @type {Number}\r\n   * @default waitTime = 2000\r\n   */\r\n  waitTime: 2000,\r\n  /**\r\n   * @description Carousel type\r\n   * @type {String}\r\n   * @default carousel = 'single'\r\n   * @example carousel = 'single' | 'page'\r\n   */\r\n  carousel: 'single',\r\n  /**\r\n   * @description Value unit\r\n   * @type {String}\r\n   * @default unit = ''\r\n   * @example unit = 'ton'\r\n   */\r\n  unit: ''\r\n}\r\n\r\nfunction calcRows({ data, rowNum }) {\r\n  data.sort(({ value: a }, { value: b }) => {\r\n    if (a > b) return -1\r\n    if (a < b) return 1\r\n    if (a === b) return 0\r\n  })\r\n\r\n  const value = data.map(({ value }) => value)\r\n\r\n  const max = Math.max(...value) || 0\r\n\r\n  data = data.map((row, i) => ({\r\n    ...row,\r\n    ranking: i + 1,\r\n    percent: (row.value / max) * 100\r\n  }))\r\n\r\n  const rowLength = data.length\r\n\r\n  if (rowLength > rowNum && rowLength < 2 * rowNum) {\r\n    data = [...data, ...data]\r\n  }\r\n\r\n  data = data.map((d, i) => ({ ...d, scroll: i }))\r\n\r\n  return data\r\n}\r\n\r\nconst ScrollRankingBoard = ({ config, className, style }) => {\r\n  const { height, domRef } = useAutoResize()\r\n\r\n  const [state, setState] = useState({\r\n    mergedConfig: null,\r\n\r\n    rows: [],\r\n\r\n    heights: []\r\n  })\r\n\r\n  const { mergedConfig, rows, heights } = state\r\n\r\n  const stateRef = useRef({ ...state, avgHeight: 0, animationIndex: 0 })\r\n  const heightRef = useRef(height)\r\n\r\n  Object.assign(stateRef.current, state)\r\n\r\n  function onResize(onresize = false) {\r\n    if (!mergedConfig) return\r\n\r\n    const heights = calcHeights(mergedConfig, onresize)\r\n\r\n    heights !== undefined && setState(state => ({ ...state, heights }))\r\n  }\r\n\r\n  function calcData() {\r\n    const mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\r\n\r\n    const rows = calcRows(mergedConfig)\r\n\r\n    const heights = calcHeights(mergedConfig)\r\n\r\n    const data = { mergedConfig, rows }\r\n\r\n    heights !== undefined && Object.assign(data, { heights })\r\n\r\n    Object.assign(stateRef.current, data)\r\n\r\n    setState(state => ({ ...state, ...data }))\r\n  }\r\n\r\n  function calcHeights({ rowNum, data }, onresize = false) {\r\n    const avgHeight = height / rowNum\r\n\r\n    Object.assign(stateRef.current, { avgHeight })\r\n\r\n    if (!onresize) {\r\n      return new Array(data.length).fill(avgHeight)\r\n    }\r\n  }\r\n\r\n  function * animation(start = false) {\r\n    let {\r\n      avgHeight,\r\n      animationIndex,\r\n      mergedConfig,\r\n      rows: rowsData\r\n    } = stateRef.current\r\n\r\n    const { waitTime, carousel, rowNum } = mergedConfig\r\n\r\n    const rowLength = rowsData.length\r\n\r\n    if (start) yield new Promise(resolve => setTimeout(resolve, waitTime))\r\n\r\n    const animationNum = carousel === 'single' ? 1 : rowNum\r\n\r\n    let rows = rowsData.slice(animationIndex)\r\n    rows.push(...rowsData.slice(0, animationIndex))\r\n\r\n    setState(state => ({\r\n      ...state,\r\n      rows,\r\n      heights: new Array(rowLength).fill(avgHeight)\r\n    }))\r\n\r\n    yield new Promise(resolve => setTimeout(resolve, 300))\r\n\r\n    animationIndex += animationNum\r\n\r\n    const back = animationIndex - rowLength\r\n    if (back >= 0) animationIndex = back\r\n\r\n    Object.assign(stateRef.current, { animationIndex })\r\n\r\n    setState(state => ({\r\n      ...state,\r\n      heights: [...state.heights].splice(\r\n        0,\r\n        animationNum,\r\n        ...new Array(animationNum).fill(0)\r\n      )\r\n    }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    calcData()\r\n\r\n    let start = true\r\n\r\n    function * loop() {\r\n      while (true) {\r\n        yield * animation(start)\r\n\r\n        start = false\r\n\r\n        const { waitTime } = stateRef.current.mergedConfig\r\n\r\n        yield new Promise(resolve => setTimeout(resolve, waitTime - 300))\r\n      }\r\n    }\r\n\r\n    const {\r\n      mergedConfig: { rowNum },\r\n      rows: rowsData\r\n    } = stateRef.current\r\n\r\n    const rowLength = rowsData.length\r\n\r\n    if (rowNum >= rowLength) return\r\n\r\n    const it = loop()\r\n\r\n    co(it)\r\n\r\n    return it.return\r\n  }, [config])\r\n\r\n  useEffect(() => {\r\n    if (heightRef.current === 0 && height !== 0) {\r\n      onResize()\r\n\r\n      heightRef.current = height\r\n    } else {\r\n      onResize(true)\r\n    }\r\n  }, [height])\r\n\r\n  const classNames = useMemo(\r\n    () => classnames('dv-scroll-ranking-board', className),\r\n    [className]\r\n  )\r\n\r\n  return (\r\n    <div className={classNames} style={style} ref={domRef}>\r\n      {rows.map((item, i) => (\r\n        <div\r\n          className='row-item'\r\n          key={item.toString() + item.scroll}\r\n          style={{ height: `${heights[i]}px` }}\r\n        >\r\n          <div className='ranking-info'>\r\n            <div className='rank'>No.{item.ranking}</div>\r\n            <div className='info-name'>{item.name}</div>\r\n            <div className='ranking-value'>\r\n              {item.value + mergedConfig.unit}\r\n            </div>\r\n          </div>\r\n\r\n          <div className='ranking-column'>\r\n            <div\r\n              className='inside-column'\r\n              style={{ width: `${item.percent}%` }}\r\n            >\r\n              <div className='shine' />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nScrollRankingBoard.propTypes = {\r\n  config: PropTypes.object,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object\r\n}\r\n\r\n// 指定 props 的默认值：\r\nScrollRankingBoard.defaultProps = {\r\n  config: {}\r\n}\r\n\r\nexport default ScrollRankingBoard\r\n"],"names":["defaultConfig","calcRows","data","rowNum","sort","a","value","b","map","max","Math","row","i","rowLength","length","d","scroll","ScrollRankingBoard","animation","config","className","style","useAutoResize","height","domRef","useState","state","setState","mergedConfig","rows","heights","stateRef","useRef","avgHeight","animationIndex","heightRef","assign","current","onResize","onresize","calcHeights","undefined","calcData","deepMerge","deepClone","Object","Array","fill","start","rowsData","waitTime","carousel","Promise","setTimeout","resolve","slice","push","animationNum","back","splice","loop","it","return","classNames","useMemo","classnames","item","toString","ranking","name","unit","width","percent","propTypes","PropTypes","object","string","defaultProps"],"mappings":"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"}