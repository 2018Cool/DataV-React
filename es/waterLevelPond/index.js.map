{"version":3,"file":"index.js","sources":["../../src/components/waterLevelPond/index.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useMemo } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport classnames from 'classnames'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nimport CRender from '@jiaminghi/c-render'\r\n\r\nimport './style.less'\r\n\r\nconst defaultConfig = {\r\n  /**\r\n   * @description Data\r\n   * @type {Array<Number>}\r\n   * @default data = []\r\n   * @example data = [60, 40]\r\n   */\r\n  data: [],\r\n  /**\r\n   * @description Shape of wanter level pond\r\n   * @type {String}\r\n   * @default shape = 'rect'\r\n   * @example shape = 'rect' | 'roundRect' | 'round'\r\n   */\r\n  shape: 'rect',\r\n  /**\r\n   * @description Water wave number\r\n   * @type {Number}\r\n   * @default waveNum = 3\r\n   */\r\n  waveNum: 3,\r\n  /**\r\n   * @description Water wave height (px)\r\n   * @type {Number}\r\n   * @default waveHeight = 40\r\n   */\r\n  waveHeight: 40,\r\n  /**\r\n   * @description Wave opacity\r\n   * @type {Number}\r\n   * @default waveOpacity = 0.4\r\n   */\r\n  waveOpacity: 0.4,\r\n  /**\r\n   * @description Colors (hex|rgb|rgba|color keywords)\r\n   * @type {Array<String>}\r\n   * @default colors = ['#00BAFF', '#3DE7C9']\r\n   * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\r\n   */\r\n  colors: ['#3DE7C9', '#00BAFF'],\r\n  /**\r\n   * @description Formatter\r\n   * @type {String}\r\n   * @default formatter = '{value}%'\r\n   */\r\n  formatter: '{value}%'\r\n}\r\n\r\nfunction drawed({ shape: { points } }, { ctx, area }) {\r\n  const firstPoint = points[0]\r\n  const lastPoint = points.slice(-1)[0]\r\n\r\n  const h = area[1]\r\n\r\n  ctx.lineTo(lastPoint[0], h)\r\n  ctx.lineTo(firstPoint[0], h)\r\n\r\n  ctx.closePath()\r\n\r\n  ctx.fill()\r\n}\r\n\r\nfunction mergeOffset([x, y], [ox, oy]) {\r\n  return [x + ox, y + oy]\r\n}\r\n\r\nconst WaterLevelPond = ({ config, className, style }) => {\r\n  const [{ mergedConfig, svgBorderGradient, details }, setState] = useState({\r\n    mergedConfig: {},\r\n\r\n    svgBorderGradient: [],\r\n\r\n    details: ''\r\n  })\r\n\r\n  const gradientId = useRef(`water-level-pond-${Date.now()}`).current\r\n\r\n  const wavesRef = useRef([])\r\n\r\n  const rendererRef = useRef(null)\r\n  const renderer = rendererRef.current\r\n\r\n  const animationRef = useRef(false)\r\n\r\n  const domRef = useRef(null)\r\n\r\n  const radius = useMemo(() => {\r\n    const { shape } = mergedConfig\r\n\r\n    if (shape === 'round') return '50%'\r\n\r\n    if (shape === 'rect') return '0'\r\n\r\n    if (shape === 'roundRect') return '10px'\r\n\r\n    return '0'\r\n  }, [mergedConfig.shape])\r\n\r\n  const shape = useMemo(() => {\r\n    const { shape } = mergedConfig\r\n\r\n    return !shape ? 'rect' : shape\r\n  }, [mergedConfig.shape])\r\n\r\n  function init() {\r\n    rendererRef.current = new CRender(domRef.current)\r\n\r\n    if (!config) return\r\n\r\n    calcData()\r\n  }\r\n\r\n  function calcData() {\r\n    const mergedConfig = deepMerge(deepClone(defaultConfig, true), config)\r\n\r\n    const svgBorderGradient = calcSvgBorderGradient(mergedConfig)\r\n\r\n    const details = calcDetails(mergedConfig)\r\n\r\n    setState({ mergedConfig, svgBorderGradient, details })\r\n\r\n    addWave(mergedConfig)\r\n\r\n    animationWave()\r\n  }\r\n\r\n  function calcSvgBorderGradient({ colors }) {\r\n    const colorNum = colors.length\r\n\r\n    const colorOffsetGap = 100 / (colorNum - 1)\r\n\r\n    return colors.map((c, i) => [colorOffsetGap * i, c])\r\n  }\r\n\r\n  function calcDetails({ data, formatter }) {\r\n    if (!data.length) {\r\n      return ''\r\n    }\r\n\r\n    const maxValue = Math.max(...data)\r\n\r\n    return formatter.replace('{value}', maxValue)\r\n  }\r\n\r\n  function addWave(mergedConfig) {\r\n    const shapes = getWaveShapes(mergedConfig)\r\n    const style = getWaveStyle(mergedConfig)\r\n\r\n    wavesRef.current = shapes.map(shape =>\r\n      rendererRef.current.add({\r\n        name: 'smoothline',\r\n        animationFrame: 300,\r\n        shape,\r\n        style,\r\n        drawed\r\n      })\r\n    )\r\n  }\r\n\r\n  function getWaveShapes({ waveNum, waveHeight, data }) {\r\n    const [w, h] = rendererRef.current.area\r\n\r\n    const pointsNum = waveNum * 4 + 4\r\n\r\n    const pointXGap = w / waveNum / 2\r\n\r\n    return data.map(v => {\r\n      let points = new Array(pointsNum).fill(0).map((foo, j) => {\r\n        const x = w - pointXGap * j\r\n\r\n        const startY = (1 - v / 100) * h\r\n\r\n        const y = j % 2 === 0 ? startY : startY - waveHeight\r\n\r\n        return [x, y]\r\n      })\r\n\r\n      points = points.map(p => mergeOffset(p, [pointXGap * 2, 0]))\r\n\r\n      return { points }\r\n    })\r\n  }\r\n\r\n  function getWaveStyle({ colors, waveOpacity }) {\r\n    const h = rendererRef.current.area[1]\r\n\r\n    return {\r\n      gradientColor: colors,\r\n      gradientType: 'linear',\r\n      gradientParams: [0, 0, 0, h],\r\n      gradientWith: 'fill',\r\n      opacity: waveOpacity,\r\n      translate: [0, 0]\r\n    }\r\n  }\r\n\r\n  async function animationWave(repeat = 1) {\r\n    const waves = wavesRef.current\r\n    const renderer = rendererRef.current\r\n    const animation = animationRef.current\r\n\r\n    if (animation) return\r\n\r\n    animationRef.current = true\r\n\r\n    const w = renderer.area[0]\r\n\r\n    waves.forEach(graph => {\r\n      graph.attr('style', { translate: [0, 0] })\r\n\r\n      graph.animation(\r\n        'style',\r\n        {\r\n          translate: [w, 0]\r\n        },\r\n        true\r\n      )\r\n    })\r\n\r\n    await renderer.launchAnimation()\r\n\r\n    animationRef.current = false\r\n\r\n    if (!renderer.graphs.length) return\r\n\r\n    animationWave(repeat + 1)\r\n  }\r\n\r\n  useEffect(() => {\r\n    init()\r\n\r\n    return () => {\r\n      rendererRef.current.delAllGraph()\r\n\r\n      wavesRef.current = []\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    rendererRef.current.delAllGraph()\r\n\r\n    wavesRef.current = []\r\n\r\n    setTimeout(calcData, 0)\r\n  }, [config])\r\n\r\n  const classNames = useMemo(\r\n    () => classnames('dv-water-pond-level', className),\r\n    [className]\r\n  )\r\n\r\n  return (\r\n    <div className={classNames} style={style}>\r\n      {!!renderer && (\r\n        <svg>\r\n          <defs>\r\n            <linearGradient id={gradientId} x1='0%' y1='0%' x2='0%' y2='100%'>\r\n              {svgBorderGradient.map(lc => (\r\n                <stop key={lc[0]} offset={lc[0]} stopColor={lc[1]} />\r\n              ))}\r\n            </linearGradient>\r\n          </defs>\r\n\r\n          <text\r\n            stroke={`url(#${gradientId})`}\r\n            fill={`url(#${gradientId})`}\r\n            x={renderer.area[0] / 2 + 8}\r\n            y={renderer.area[1] / 2 + 8}\r\n          >\r\n            {details}\r\n          </text>\r\n\r\n          {!shape || shape === 'round' ? (\r\n            <ellipse\r\n              cx={renderer.area[0] / 2 + 8}\r\n              cy={renderer.area[1] / 2 + 8}\r\n              rx={renderer.area[0] / 2 + 5}\r\n              ry={renderer.area[1] / 2 + 5}\r\n              stroke={`url(#${gradientId})`}\r\n            />\r\n          ) : (\r\n            <rect\r\n              x='2'\r\n              y='2'\r\n              rx={shape === 'roundRect' ? 10 : 0}\r\n              ry={shape === 'roundRect' ? 10 : 0}\r\n              width={renderer.area[0] + 12}\r\n              height={renderer.area[1] + 12}\r\n              stroke={`url(#${gradientId})`}\r\n            />\r\n          )}\r\n        </svg>\r\n      )}\r\n\r\n      <canvas ref={domRef} style={{ borderRadius: `${radius}` }} />\r\n    </div>\r\n  )\r\n}\r\n\r\nWaterLevelPond.propTypes = {\r\n  config: PropTypes.object,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object\r\n}\r\n\r\n// 指定 props 的默认值：\r\nWaterLevelPond.defaultProps = {\r\n  config: {}\r\n}\r\n\r\nexport default WaterLevelPond\r\n"],"names":["defaultConfig","drawed","points","shape","ctx","area","firstPoint","lastPoint","slice","h","lineTo","closePath","fill","mergeOffset","x","y","ox","oy","WaterLevelPond","repeat","wavesRef","current","rendererRef","animationRef","animation","renderer","forEach","attr","translate","w","launchAnimation","graphs","length","animationWave","config","className","style","useState","mergedConfig","svgBorderGradient","details","setState","gradientId","useRef","Date","now","domRef","radius","useMemo","init","CRender","calcData","deepMerge","deepClone","calcSvgBorderGradient","calcDetails","colors","colorNum","colorOffsetGap","map","c","i","data","formatter","maxValue","Math","max","replace","addWave","shapes","getWaveShapes","getWaveStyle","add","waveNum","waveHeight","pointsNum","pointXGap","Array","foo","j","startY","v","p","waveOpacity","delAllGraph","classNames","classnames","lc","borderRadius","propTypes","PropTypes","object","string","defaultProps"],"mappings":"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"}